// Generated by Bisonc++ V5.02.00 on Thu, 06 Apr 2017 02:09:02 +0200

#ifndef Parser_h_included
#define Parser_h_included

#define LINE d_loc__.first_line
#define TAB "    "

// $insert baseclass
#include "Parserbase.h"
#include "FlexLexer.h"
#include <cstdlib>

#undef Parser
class Parser: public ParserBase
{
        
    public:
        typedef std::map<std::string,var_data> symbol_table;
        Parser(std::istream& in) : lexer(&in, &std::cerr) {}
        int parse();

    private:
        yyFlexLexer lexer;
        symbol_table symbols;
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
        
        std::string typeToString(type var_type);
        bool assertType(const std::string& owner, type expected, type actual);
        bool assertType(const std::string& owner, type expected1, type expected2, type actual1, type actual2);
        void insertSymbol(type var_type, std::string name);
        void error_undeclared(const std::string& identifier);
        std::string two_param_compare(const expr_desc* left, const expr_desc* right, const std::string& set_type);
        std::string two_param_expr(const expr_desc* left, const expr_desc* right, const std::string& instruction);
        std::string register_with_size(const std::string& reg_name, int size);
        int size_of(type var_type);
};


#endif
